{"version":3,"file":"rete.esm.js","sources":["../src/engine/component.ts","../src/node.ts","../src/component.ts","../src/connection.ts","../src/control.ts","../src/core/emitter.ts","../src/io.ts","../src/input.ts","../src/core/validator.ts","../src/core/context.ts","../src/view/utils.ts","../src/view/drag.ts","../src/view/zoom.ts","../src/view/area.ts","../src/view/connection.ts","../src/view/control.ts","../src/view/socket.ts","../src/view/node.ts","../src/view/index.ts","../src/selected.ts","../src/core/events.ts","../src/events.ts","../src/editor.ts","../src/output.ts","../src/socket.ts","../src/candidate.ts","../src/engine/recursion.ts","../src/engine/state.ts","../src/engine/events.ts","../src/engine/index.ts","../src/index.ts"],"sourcesContent":["import { Engine } from './index';\nimport { NodeData, WorkerInputs, WorkerOutputs } from '../core/data';\n\nexport abstract class Component {\n\n    name: string;\n    data: unknown = {};\n    engine: Engine | null = null;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    abstract worker(node: NodeData, inputs: WorkerInputs, outputs: WorkerOutputs, ...args: unknown[]): void;\n}","import { Connection } from './connection';\nimport { Control } from './control';\nimport { Input } from './input';\nimport { Output } from './output';\nimport { InputsData, NodeData, OutputsData } from './core/data';\nimport { Candidate } from './candidate';\n\nexport class Node {\n\n    name: string;\n    id: number;\n    position: [number, number] = [0.0, 0.0];\n    inputs = new Map<string, Input>();\n    outputs = new Map<string, Output>();\n    controls = new Map<string, Control>();\n    data: { [key: string]: unknown } = {};\n    meta: { [key: string]: unknown } = {};\n    collapsed: boolean;\n    candidates = new Map<string, Candidate>();\n    descriptionCollapsed: boolean;\n    inputsCollapsed: boolean;\n    processedCollapsed: boolean;\n    outputsCollapsed: boolean;\n\n    static latestId = 0;\n\n    constructor(name: string) {\n        this.name = name;\n        this.collapsed = false;\n        this.descriptionCollapsed = true;\n        this.inputsCollapsed = false;\n        this.processedCollapsed = true;\n        this.outputsCollapsed = false;\n        this.id = Node.incrementId();\n    }\n\n    _add<T extends { key: string } & Record<string, any>>(list: Map<string, T>, item: T, prop: string) {\n        if (list.has(item.key))\n            throw new Error(`Item with key '${item.key}' already been added to the node`);\n        if (item[prop] !== null)\n            throw new Error('Item has already been added to some node');\n\n        (item as Record<string, Node>)[prop] = this;\n        list.set(item.key, item);\n    }\n\n    addControl(control: Control) {\n        this._add(this.controls, control, 'parent');\n        return this;\n    }\n\n    removeControl(control: Control) {\n        control.parent = null;\n\n        this.controls.delete(control.key);\n    }\n\n    addInput(input: Input) {\n        this._add(this.inputs, input, 'node');\n        return this;\n    }\n\n    removeInput(input: Input) {\n        input.removeConnections();\n        input.node = null;\n\n        this.inputs.delete(input.key);\n    }\n\n    addOutput(output: Output) {\n        this._add(this.outputs, output, 'node');\n        return this;\n    }\n\n    removeOutput(output: Output) {\n        output.removeConnections();\n        output.node = null;\n\n        this.outputs.delete(output.key);\n    }\n\n    addCandidate(candidate: Candidate){\n        this._add(this.candidates, candidate, 'node');\n        return this;\n    }\n\n    removeCandidate(candidate: Candidate){\n        this.candidates.delete(candidate.key);\n    }\n\n    setMeta(meta: { [key: string]: unknown }) {\n        this.meta = meta;\n        return this;\n    }\n\n    getConnections() {\n        const ios = [...this.inputs.values(), ...this.outputs.values()];\n        const connections = ios.reduce((arr, io) => {\n            return [...arr, ...io.connections];\n        }, [] as Connection[]);\n\n        return connections;\n    }\n\n    update() {\n    }\n\n    static incrementId() {\n        if (!this.latestId)\n            this.latestId = 1\n        else\n            this.latestId++\n        return this.latestId\n    }\n\n    static resetId() {\n        this.latestId = 0;\n    }\n\n    toJSON(): NodeData {\n        const reduceIO = <T extends Record<string, any>>(list: Map<string, Input | Output | Candidate>) => {\n            return Array.from(list).reduce<T>((obj, [key, io]) => {\n                (obj as Record<string, any>)[key] = io.toJSON();\n                return obj;\n            }, {} as any)\n        }\n\n        return {\n            'id': this.id,\n            'data': this.data,\n            'inputs': reduceIO<InputsData>(this.inputs),\n            'outputs': reduceIO<OutputsData>(this.outputs),\n            'position': this.position,\n            'name': this.name,\n            'collapsed': this.collapsed,\n            'candidates': Array.from(this.candidates).map(([_,val])=>val),\n            'descriptionCollapsed':this.descriptionCollapsed,\n            'inputsCollapsed': this.inputsCollapsed,\n            'processedCollapsed': this.processedCollapsed,\n            'outputsCollapsed': this.outputsCollapsed\n        }\n    }\n\n    static fromJSON(json: NodeData) {\n        const node = new Node(json.name);\n        const [x, y] = json.position;\n\n        node.id = json.id;\n        node.data = json.data;\n        node.position = [x, y];\n        node.name = json.name;\n        Node.latestId = Math.max(node.id, Node.latestId);\n        node.collapsed = json.collapsed;\n        const candidatesMap = new Map<string, Candidate>();\n        for (const key in json.candidates) {\n            if (json.candidates.hasOwnProperty(key)) {\n                candidatesMap.set(key, json.candidates[key]);\n            }\n        }\n        node.candidates = candidatesMap;\n        node.descriptionCollapsed = json.descriptionCollapsed;\n        node.inputsCollapsed = json.inputsCollapsed;\n        node.processedCollapsed = json.processedCollapsed;\n        node.outputsCollapsed = json.outputsCollapsed;\n\n        return node;\n    }\n}\n","import { Component as ComponentWorker } from './engine/component';\nimport { Node } from './node';\nimport { NodeEditor } from './editor';\n\nexport abstract class Component extends ComponentWorker {\n\n    editor: NodeEditor | null = null;\n    data: unknown = {};\n\n    constructor(name: string) {\n        super(name);\n    }\n\n    abstract builder(node: Node): Promise<void>;\n\n    async build(node: Node) {\n        await this.builder(node);\n\n        return node;\n    }\n\n    async createNode(data = {}) {\n        const node = new Node(this.name);\n\n        node.data = data;\n        await this.build(node);\n\n        return node;\n    }\n}\n","import { Input } from './input';\nimport { Output } from './output';\n\nexport class Connection {\n\n    output: Output;\n    input: Input;\n    data: unknown = {};\n\n    constructor(output: Output, input: Input) {\n        this.output = output;\n        this.input = input;\n        this.data = {};\n\n        this.input.addConnection(this);\n    }\n\n    remove() {\n        this.input.removeConnection(this);\n        this.output.removeConnection(this);\n    }\n}","import { Input } from './input';\nimport { Node } from './node';\n\nexport class Control {\n\n    key: string;\n    data: unknown = {};\n    parent: Node | Input | null = null;\n\n    constructor(key: string) {\n        if (this.constructor === Control)\n            throw new TypeError('Can not construct abstract class');\n        if (!key)\n            throw new Error('The key parameter is missing in super() of Control ');\n\n        this.key = key;\n    }\n\n    getNode() {\n        if (this.parent === null)\n            throw new Error('Control isn\\'t added to Node/Input');   \n        \n        if (this.parent instanceof Node)\n            return this.parent;\n            \n        if (!this.parent.node)\n            throw new Error('Control hasn\\'t be added to Input or Node');\n\n        return this.parent.node;\n    }\n\n    getData(key: string) {\n        return this.getNode().data[key];\n    }\n\n    putData(key: string, data: unknown) {\n        this.getNode().data[key] = data;\n    }  \n}","import { Events } from './events';\n\nexport class Emitter<EventTypes> {\n\n    events: {[key: string]: Function[]} = {};\n    silent = false;\n\n    constructor(events: Events | Emitter<EventTypes>) {\n        this.events = events instanceof Emitter ? events.events : events.handlers;\n    }\n\n    on<K extends keyof EventTypes>(names: K | K[], handler: (args: EventTypes[K]) => void | unknown): this {\n        const events = names instanceof Array ? names : (names as string).split(' ');\n\n        (events as string[]).forEach(name => {\n            if (!this.events[name])\n                throw new Error(`The event ${name} does not exist`);\n            this.events[name].push(handler);\n        });\n\n        return this;\n    }\n\n    trigger<K extends keyof EventTypes>(name: K, params: EventTypes[K] | {} = {}) {\n        if (!(name in this.events))\n            throw new Error(`The event ${String(name)} cannot be triggered`);\n\n        return this.events[name as string].reduce((r: boolean, e: Function) => {\n            return (e(params) !== false) && r\n        }, true); // return false if at least one event is false\n    }\n\n    bind(name: string) {\n        if (this.events[name])\n            throw new Error(`The event ${name} is already bound`);\n\n        this.events[name] = [];\n    }\n\n    exist(name: string) {\n        return Array.isArray(this.events[name]);\n    }\n}\n","import { Connection } from './connection';\nimport { Node } from './node';\nimport { Socket } from './socket';\n\nexport class IO {\n\n    node: Node | null = null;\n    multipleConnections: boolean;\n    connections: Connection[] = [];\n   \n    key: string;\n    name: string;\n    socket: Socket;\n    data: any;\n\n    constructor(key: string, name: string, socket: Socket, multiConns: boolean) {\n\t    this.node = null;\n        this.multipleConnections = multiConns;\n        this.connections = [];\n\t   \n        this.key = key;\n        this.name = name;\n        this.socket = socket;\n    }\n    \n    removeConnection(connection: Connection) {\n        this.connections.splice(this.connections.indexOf(connection), 1);\n    }\n\n    removeConnections() {\n        this.connections.forEach(connection => this.removeConnection(connection));\n    }\n}","import { Connection } from './connection';\nimport { Control } from './control';\nimport { IO } from './io';\nimport { InputData } from './core/data';\nimport { Socket } from './socket';\n\nexport class Input extends IO {\n\n    control: Control | null = null;\n\n    constructor(key: string, title: string, socket: Socket, multiConns = false) {\n        super(key, title, socket, multiConns);\n    }\n\n    hasConnection() {\n        return this.connections.length > 0;\n    }\n\n    addConnection(connection: Connection) {\n        if (!this.multipleConnections && this.hasConnection())\n            throw new Error('Multiple connections not allowed');\n        this.connections.push(connection);\n    }\n\n    addControl(control: Control) {\n        this.control = control;\n        control.parent = this;\n    }\n\n    showControl() {\n        return !this.hasConnection() && this.control !== null;\n    }\n\n    toJSON(): InputData {\n        return {\n            'connections': this.connections.map(c => {\n                if (!c.output.node) throw new Error('Node not added to Output');\n\n                return {\n                    node: c.output.node.id,\n                    output: c.output.key,\n                    data: c.data\n                };\n            })\n        };\n    }\n}\n","import { Data } from './data';\n\nexport class Validator {\n\n    static isValidData(data: Data) {\n        return typeof data.id === 'string' &&\n            this.isValidId(data.id) &&\n            data.nodes instanceof Object && !(data.nodes instanceof Array);\n    }\n\n    static isValidId(id: string) {\n        return /^[\\w-]{3,}@[0-9]+\\.[0-9]+\\.[0-9]+$/.test(id);\n    }\n\n    static validate(id: string, data: Data) {\n        const id1 = id.split('@');\n        const id2 = data.id.split('@');\n        const msg = [];\n\n        if (!this.isValidData(data))\n            msg.push('Data is not suitable');\n        if (id !== data.id)\n            msg.push('IDs not equal');\n        if (id1[0] !== id2[0])\n            msg.push('Names don\\'t match');\n        if (id1[1] !== id2[1])\n            msg.push('Versions don\\'t match');\n\n        return { success: Boolean(!msg.length), msg: msg.join('. ') };\n    }\n}\n","import { Component } from '../engine/component';\nimport { Emitter } from './emitter'\nimport { Validator } from './validator'\nimport { EventsTypes as DefaultEvents, Events } from './events';\nimport { Plugin, PluginParams } from './plugin';\n\nexport class Context<EventsTypes> extends Emitter<EventsTypes & DefaultEvents> {\n\n    id: string;\n    plugins: Map<string, unknown>;\n    components: Map<string, Component>;\n\n    constructor(id: string, events: Events) {\n        super(events);\n\n        if (!Validator.isValidId(id))\n            throw new Error('ID should be valid to name@0.1.0 format');  \n        \n        this.id = id;\n        this.plugins = new Map();\n        this.components = new Map();\n    }\n\n    use<T extends Plugin, O extends PluginParams<T>>(plugin: T, options?: O) {\n        if (plugin.name && this.plugins.has(plugin.name)) throw new Error(`Plugin ${plugin.name} already in use`)\n\n        plugin.install(this, options || {});\n        this.plugins.set(plugin.name, options)\n    }\n\n    register(component: Component) {\n        if (this.components.has(component.name))\n            throw new Error(`Component ${component.name} already registered`);\n\n        this.components.set(component.name, component);\n        this.trigger('componentregister', component);\n    }\n\n    destroy() {\n        this.trigger('destroy');\n    }\n}","export function listenWindow<K extends keyof WindowEventMap>(event: K, handler: (e: WindowEventMap[K]) => void) {\n    window.addEventListener(event, handler);\n\n    return () => {\n        window.removeEventListener<K>(event, handler);\n    }\n}\n","import { listenWindow } from './utils';\n\nexport class Drag {\n\n    pointerStart: [number, number] | null;\n    el: HTMLElement;\n    destroy: () => void;\n\n    constructor(\n        el: HTMLElement,\n        private onTranslate = (_x: number, _y: number, _e: PointerEvent) => {},\n        private onStart = (_e: PointerEvent) => {},\n        private onDrag = (_e: PointerEvent) => {}\n    ) {\n        this.pointerStart = null;\n        this.el = el;\n\n        this.el.style.touchAction = 'none';\n        this.el.addEventListener('pointerdown', this.down.bind(this));\n\n        const destroyMove = listenWindow('pointermove', this.move.bind(this));\n        const destroyUp = listenWindow('pointerup', this.up.bind(this));\n\n        this.destroy = () => { destroyMove(); destroyUp(); }\n    }\n\n    down(e: PointerEvent) {\n        if ((e.pointerType === 'mouse') && (e.button !== 0)) return;\n        e.stopPropagation();\n        this.pointerStart = [e.pageX, e.pageY]\n\n        this.onStart(e);\n    }\n\n    move(e: PointerEvent) {\n        if (!this.pointerStart) return;\n        e.preventDefault();\n\n        const [x, y] = [e.pageX, e.pageY]\n\n        const delta = [x - this.pointerStart[0], y - this.pointerStart[1]];\n\n        const zoom = this.el.getBoundingClientRect().width / this.el.offsetWidth;\n\n        this.onTranslate(delta[0] / zoom, delta[1] / zoom, e);\n    }\n\n    up(e: PointerEvent) {\n        if (!this.pointerStart) return;\n\n        this.pointerStart = null;\n        this.onDrag(e);\n    }\n}\n","import { listenWindow } from './utils';\n\nexport class Zoom {\n\n    el: HTMLElement;\n    intensity: number;\n    onzoom: Function;\n    previous: { cx: number; cy: number; distance: number } | null = null;\n\n    pointers: PointerEvent[] = [];\n    destroy: () => void;\n\n    constructor(container: HTMLElement, el: HTMLElement, intensity: number, onzoom: Function) {\n        this.el = el;\n        this.intensity = intensity;\n        this.onzoom = onzoom;\n\n        container.addEventListener('wheel', this.wheel.bind(this));\n        container.addEventListener('pointerdown', this.down.bind(this));\n        container.addEventListener('dblclick', this.dblclick.bind(this));\n\n        const destroyMove = listenWindow('pointermove', this.move.bind(this));\n        const destroyUp = listenWindow('pointerup', this.end.bind(this));\n        const destroyCancel = listenWindow('pointercancel', this.end.bind(this));\n\n        this.destroy = () => { destroyMove(); destroyUp(); destroyCancel(); }\n    }\n\n    get translating() { // is translating while zoom (works on multitouch)\n        return this.pointers.length >= 2;\n    }\n\n    wheel(e: WheelEvent) {\n        e.preventDefault();\n\n        const rect = this.el.getBoundingClientRect();\n        const isNegative = e.deltaY < 0;\n        const delta = isNegative ? this.intensity : - this.intensity;\n        const ox = (rect.left - e.clientX) * delta;\n        const oy = (rect.top - e.clientY) * delta;\n\n        this.onzoom(delta, ox, oy, 'wheel');\n    }\n\n    touches() {\n        const e = { touches: this.pointers }\n        const [x1, y1] = [e.touches[0].clientX, e.touches[0].clientY];\n        const [x2, y2] = [e.touches[1].clientX, e.touches[1].clientY];\n\n        const distance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n\n        return {\n            cx: (x1 + x2)/2,\n            cy: (y1 + y2)/2,\n            distance\n        };\n    }\n\n    down(e: PointerEvent) {\n        this.pointers.push(e);\n    }\n\n    move(e: PointerEvent) {\n        this.pointers = this.pointers.map(p => p.pointerId === e.pointerId ? e : p)\n        if (!this.translating) return;\n\n        const rect = this.el.getBoundingClientRect();\n\n        const { cx, cy, distance } = this.touches();\n\n        if (this.previous !== null) {\n            const delta = distance / this.previous.distance - 1;\n\n            const ox = (rect.left - cx) * delta;\n            const oy = (rect.top - cy) * delta;\n\n            this.onzoom(delta, ox - (this.previous.cx - cx), oy - (this.previous.cy - cy), 'touch');\n        }\n        this.previous = { cx, cy, distance };\n    }\n\n    end(e: PointerEvent) {\n        this.previous = null;\n        this.pointers = this.pointers.filter(p => p.pointerId !== e.pointerId)\n    }\n\n    dblclick(e: MouseEvent) {\n        e.preventDefault();\n\n        const rect = this.el.getBoundingClientRect();\n        const delta = 4 * this.intensity;\n\n        const ox = (rect.left - e.clientX) * delta;\n        const oy = (rect.top - e.clientY) * delta;\n\n        this.onzoom(delta, ox, oy, 'dblclick');\n    }\n}\n","import { Drag } from './drag';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { Zoom } from './zoom';\n\nexport interface Transform { k: number; x: number; y: number }\nexport interface Mouse { x: number; y: number }\nexport type ZoomSource = 'wheel' | 'touch' | 'dblclick';\n\nexport class Area extends Emitter<EventsTypes> {\n\n    el: HTMLElement;\n    container: HTMLElement;\n    transform: Transform = { k: 1, x: 0, y: 0 };\n    mouse: Mouse = { x: 0, y: 0 }\n    \n    private _startPosition: Transform | null = null\n    private _zoom: Zoom;\n    private _drag: Drag;\n\n    constructor(container: HTMLElement, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        \n        const el = this.el = document.createElement('div');\n\n        this.container = container;\n        el.style.transformOrigin = '0 0';\n\n        this._zoom = new Zoom(container, el, 0.1, this.onZoom.bind(this));\n        this._drag = new Drag(container, this.onTranslate.bind(this), this.onStart.bind(this));\n\n        emitter.on('destroy', () => {\n            this._zoom.destroy();\n            this._drag.destroy();\n        });\n\n        this.container.addEventListener('pointermove', this.pointermove.bind(this));\n\n        this.update();\n    }\n\n    update() {\n        const t = this.transform;\n\n        this.el.style.transform = `translate(${t.x}px, ${t.y}px) scale(${t.k})`;\n    }\n\n    pointermove(e: PointerEvent) {\n        const { clientX, clientY } = e;\n        const rect = this.el.getBoundingClientRect();\n        const x = clientX - rect.left;\n        const y = clientY - rect.top;\n        const k = this.transform.k;\n        \n        this.mouse = { x: x / k, y: y / k };\n        this.trigger('mousemove', { ...this.mouse }); // TODO rename on `pointermove`\n    }\n\n    onStart() {\n        this._startPosition = { ...this.transform };\n    }\n\n    onTranslate(dx: number, dy: number) {\n        if (this._zoom.translating) return; // lock translation while zoom on multitouch\n        if (this._startPosition) this.translate(this._startPosition.x + dx, this._startPosition.y + dy);\n    }\n\n    onZoom(delta: number, ox: number, oy: number, source: ZoomSource) {\n        this.zoom(this.transform.k * (1 + delta), ox, oy, source);\n\n        this.update();\n    }\n\n    translate(x: number, y: number) {\n        const params = { transform: this.transform, x, y };\n\n        if (!this.trigger('translate', params)) return;\n\n        this.transform.x = params.x;\n        this.transform.y = params.y;\n\n        this.update();\n        this.trigger('translated');\n    }\n\n    zoom(zoom: number, ox = 0, oy = 0, source: ZoomSource) {\n        const k = this.transform.k;\n        const params = { transform: this.transform, zoom, source };\n\n        if (!this.trigger('zoom', params)) return;\n        \n        const d = (k - params.zoom) / ((k - zoom) || 1);\n\n        this.transform.k = params.zoom || 1;\n        this.transform.x += ox * d;\n        this.transform.y += oy * d;\n\n        this.update();\n        this.trigger('zoomed', { source });\n    }\n\n    appendChild(el: HTMLElement) {\n        this.el.appendChild(el)\n    }\n\n    removeChild(el: HTMLElement) {\n        this.el.removeChild(el)\n    }\n}","import { Connection } from '../connection';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { NodeView } from './node';\n\nexport class ConnectionView extends Emitter<EventsTypes> {\n\n    connection: Connection;\n    inputNode: NodeView;\n    outputNode: NodeView;\n    el: HTMLElement;\n\n    constructor(connection: Connection, inputNode: NodeView, outputNode: NodeView, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        this.connection = connection;\n        this.inputNode = inputNode;\n        this.outputNode = outputNode;\n\n        this.el = document.createElement('div');\n        this.el.style.position = 'absolute';\n        this.el.style.zIndex = '-1';\n\n        this.trigger('renderconnection', {\n            el: this.el,\n            connection: this.connection,\n            points: this.getPoints()\n        });\n    }\n\n    getPoints() {\n        const { input, output } = this.connection\n\n        if (this.inputNode.hasSocket(input) && this.outputNode.hasSocket(output)) {\n            const [x1, y1] = this.outputNode.getSocketPosition(output);\n            const [x2, y2] = this.inputNode.getSocketPosition(input);\n\n            return [x1, y1, x2, y2];\n        }\n\n        return [0, 0, 0, 0]\n    }\n\n    update() {\n        this.trigger('updateconnection', {\n            el: this.el,\n            connection: this.connection,\n            points: this.getPoints()\n        });\n    }\n}\n","import { Control } from '../control';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\n\nexport class ControlView extends Emitter<EventsTypes> {\n\n    constructor(el: HTMLElement, control: Control, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        this.trigger('rendercontrol', { el, control });\n    }\n}","import { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { IO } from '../io';\nimport { Node } from '../node';\n\nexport class SocketView extends Emitter<EventsTypes> {\n\n    el: HTMLElement;\n    type: string;\n    io: IO;\n    node: Node;\n\n    constructor(el: HTMLElement, type: string, io: IO, node: Node, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n        this.el = el;\n        this.type = type;\n        this.io = io;\n        this.node = node;\n\n        this.trigger('rendersocket', { el, [type]: this.io, socket: io.socket });\n    }\n\n    getPosition({ position }: { position: number[] }): [number, number] {\n        const el = this.el;\n\n        if (this.node.collapsed) {\n            let isOutput = false;\n            const customHackedOffsetX = 50;\n\n            if (this.io.node) {\n                isOutput = this.io.socket.name === 'output'\n            }\n\n            const nodeNameId = document.getElementById(this.node.name.toLowerCase() + '-' + this.node.id);\n\n            if(!nodeNameId) {\n                throw Error(`The node name id: nodename-${this.node.id} not found. Make sure to set the id in the HTML element`);\n            }\n\n\n            // the middle of the node component\n            const posY = nodeNameId.offsetHeight / 2\n\n            if (isOutput) {\n                const detailsElement = document.getElementById('details-' + this.node.id);\n                if(!detailsElement){\n                    throw Error(`The details id: details-${this.node.id} not found. Make sure to set the id in the details HTML element`);\n                }\n                const posXOutput = detailsElement.offsetWidth - customHackedOffsetX\n\n                return [\n                    \n                    position[0] + posXOutput,\n                    position[1] + posY\n                ]\n            }\n\n            return [\n                position[0] + customHackedOffsetX,\n                position[1] + posY\n            ]\n        }\n        if (this.node.inputsCollapsed) {\n            let isOutput = false;\n            const customHackedOffsetX = 50;\n            const customHackedOffsetY = -10;\n\n            if (this.io.node) {\n                isOutput = this.io.socket.name === 'output'\n            }\n            if (!isOutput) {\n                const nodeInputs = document.getElementById('node-inputs-' + this.node.id)\n                const nodeSummary = document.getElementById('node-summary-' + this.node.id);\n\n                if(!nodeInputs){\n                    throw Error(`The node-inputs id: node-inputs-${this.node.id} not found. Make sure to set the id in the HTML element`);\n                }\n\n                if(!nodeSummary){\n                    throw Error(`The node-summary id: node-summary-${this.node.id} not found. Make sure to set the id in the HTML element`);\n                }\n\n                // the middle of the inputs\n                const posY = nodeInputs.offsetHeight + nodeSummary.offsetHeight + customHackedOffsetY\n\n                return [\n                    position[0] + customHackedOffsetX,\n                    position[1] + posY\n                ]\n            }\n        }\n        if (this.node.outputsCollapsed) {\n            let isOutput = false;\n            const customHackedOffsetX = 47;\n            const customHackedOffsetY = 0;\n\n            if (this.io.node) {\n                isOutput = this.io.socket.name === 'output'\n            }\n            if (isOutput) {\n\n                const companyId = document.getElementById('company-' + this.node.id);\n                const nodeFooterId = document.getElementById('node-footer-' + this.node.id)\n                const nodeOutputsId = document.getElementById('node-outputs-' + this.node.id);\n                const detailsId = document.getElementById('details-' + this.node.id);\n\n                if(!companyId){\n                    throw Error(`The company id: company-${this.node.id} not found. Make sure to set the id in the HTML element`);\n                }\n\n                if(!nodeFooterId){\n                    throw Error(`The node-footer id: node-footer-${this.node.id} not found. Make sure to set the id in the HTML element`);\n                }\n                if(!nodeOutputsId){\n                    throw Error(`The node-outputs id: node-outputs-${this.node.id} not found. Make sure to set the id in the HTML element`);\n                }\n                if(!detailsId){\n                    throw Error(`The details id: details-${this.node.id} not found. Make sure to set the id in the HTML element`);\n                }\n\n                // the middle of the outputs\n                const posY = companyId.offsetHeight + customHackedOffsetY - nodeFooterId.offsetHeight - \n                nodeOutputsId.offsetHeight / 2\n                \n                const posXOutput = detailsId.offsetWidth - customHackedOffsetX\n\n                return [\n                    position[0] + posXOutput,\n                    position[1] + posY\n                ]\n            }\n        }\n        return [\n            position[0] + el.offsetLeft + el.offsetWidth / 2,\n            position[1] + el.offsetTop + el.offsetHeight / 2\n        ]\n    }\n}","import { Component } from '../engine/component';\nimport { Control } from '../control';\nimport { ControlView } from './control';\nimport { Drag } from './drag';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { IO } from '../io';\nimport { Node } from '../node';\nimport { SocketView } from './socket';\n\nexport class NodeView extends Emitter<EventsTypes> {\n\n    node: Node;\n    component: Component;\n    sockets = new Map<IO, SocketView>();\n    controls = new Map<Control, ControlView>();\n\n    el: HTMLElement;\n    private _startPosition: number[] = [];\n    private _drag: Drag;\n\n    constructor(node: Node, component: Component, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n\n        this.node = node;\n        this.component = component;\n        this.el = document.createElement('div');\n        this.el.style.position = 'absolute';\n\n        this.el.addEventListener('contextmenu', e => this.trigger('contextmenu', { e, node: this.node }));\n\n        this._drag = new Drag(this.el, this.onTranslate.bind(this), this.onSelect.bind(this), () => {\n            this.trigger('nodedraged', node);\n            this.trigger('nodedragged', node);\n        });\n\n        this.trigger('rendernode', {\n            el: this.el,\n            node,\n            component: component.data,\n            bindSocket: this.bindSocket.bind(this),\n            bindControl: this.bindControl.bind(this)\n        });\n\n        this.update();\n    }\n\n    clearSockets() {\n        const ios: IO[] = [ ...this.node.inputs.values(), ...this.node.outputs.values()];\n\n        this.sockets.forEach(s => {\n            if (!ios.includes(s.io)) this.sockets.delete(s.io);\n        });\n    }\n\n    bindSocket(el: HTMLElement, type: string, io: IO) {\n        this.clearSockets();\n        this.sockets.set(io, new SocketView(el, type, io, this.node, this));\n    }\n\n    bindControl(el: HTMLElement, control: Control) {\n        this.controls.set(control, new ControlView(el, control, this));\n    }\n\n    hasSocket(io: IO) {\n        return this.sockets.has(io)\n    }\n\n    getSocketPosition(io: IO) {\n        const socket = this.sockets.get(io);\n\n        if (!socket) throw new Error(`Socket not found for ${io.name} with key ${io.key}`);\n\n        return socket.getPosition(this.node);\n    }\n\n    onSelect(e: MouseEvent) {\n        const payload = { node: this.node, accumulate: e.ctrlKey, e };\n\n        this.onStart();\n        this.trigger('multiselectnode', payload);\n        this.trigger('selectnode', payload);\n    }\n\n    onStart() {\n        this._startPosition = [...this.node.position];\n    }\n\n    onTranslate(dx: number, dy: number) {\n        this.trigger('translatenode', { node: this.node, dx, dy });\n    }\n\n    onDrag(dx: number, dy: number) {\n        const x = this._startPosition[0] + dx;\n        const y = this._startPosition[1] + dy;\n\n        this.translate(x, y);\n    }\n\n    translate(x: number, y: number) {\n        const node = this.node;\n        const params = { node, x, y };\n\n        if (!this.trigger('nodetranslate', params)) return;\n\n        const [px, py] = node.position;\n        const prev: [number, number] = [px, py];\n\n        node.position[0] = params.x;\n        node.position[1] = params.y;\n\n        this.update();\n        this.trigger('nodetranslated', { node, prev });\n    }\n\n    update() {\n        const [x, y] = this.node.position;\n\n        this.el.style.transform = `translate(${x}px, ${y}px)`;\n    }\n\n    remove() {\n\n    }\n\n    destroy() {\n        this._drag.destroy();\n    }\n}\n","import { Area } from './area';\nimport { Component } from '../engine/component';\nimport { Connection } from '../connection';\nimport { ConnectionView } from './connection';\nimport { Emitter } from '../core/emitter';\nimport { EventsTypes } from '../events';\nimport { Node } from '../node';\nimport { NodeView } from './node';\nimport { listenWindow } from './utils';\n\nexport class EditorView extends Emitter<EventsTypes> {\n\n    container: HTMLElement;\n    components: Map<string, Component>;\n    nodes = new Map<Node, NodeView>();\n    connections = new Map<Connection, ConnectionView>();\n    area: Area;\n\n    // eslint-disable-next-line max-statements\n    constructor(container: HTMLElement, components: Map<string, Component>, emitter: Emitter<EventsTypes>) {\n        super(emitter);\n\n        this.container = container;\n        this.components = components;\n\n        this.container.style.overflow = 'hidden';\n\n        this.container.addEventListener('click', this.click.bind(this));\n        this.container.addEventListener('contextmenu', e => this.trigger('contextmenu', { e, view: this }));\n        emitter.on('destroy', listenWindow('resize', this.resize.bind(this)));\n        emitter.on('destroy', () => this.nodes.forEach(view => view.destroy()));\n\n        this.on('nodetranslated', this.updateConnections.bind(this));\n        this.on('rendersocket', ({ input, output }) => {\n            const connections = Array.from(this.connections.entries())\n            const relatedConnections = connections.filter(([connection]) => {\n                return connection.input === input || connection.output === output\n            })\n\n            relatedConnections.forEach(([_, view]) => requestAnimationFrame(() => view.update()))\n        })\n\n        this.area = new Area(container, this);\n        this.container.appendChild(this.area.el);\n    }\n\n    addNode(node: Node) {\n        const component = this.components.get(node.name);\n\n        if (!component) throw new Error(`Component ${node.name} not found`);\n\n        const nodeView = new NodeView(node, component, this);\n\n        this.nodes.set(node, nodeView);\n        this.area.appendChild(nodeView.el);\n    }\n\n    removeNode(node: Node) {\n        const nodeView = this.nodes.get(node);\n\n        this.nodes.delete(node);\n        if (nodeView) {\n            this.area.removeChild(nodeView.el);\n            nodeView.destroy();\n        }\n    }\n\n    addConnection(connection: Connection) {\n        if (!connection.input.node || !connection.output.node)\n            throw new Error('Connection input or output not added to node');\n\n        const viewInput = this.nodes.get(connection.input.node);\n        const viewOutput = this.nodes.get(connection.output.node);\n\n        if (!viewInput || !viewOutput)\n            throw new Error('View node not found for input or output');\n\n        const connView = new ConnectionView(connection, viewInput, viewOutput, this);\n\n        this.connections.set(connection, connView);\n        this.area.appendChild(connView.el);\n    }\n\n    removeConnection(connection: Connection) {\n        const connView = this.connections.get(connection);\n\n        this.connections.delete(connection);\n        if (connView)\n            this.area.removeChild(connView.el);\n    }\n\n    updateConnections({ node }: { node: Node }) {\n        node.getConnections().forEach(conn => {\n            const connView = this.connections.get(conn);\n\n            if (!connView) throw new Error('Connection view not found');\n\n            connView.update();\n        });\n    }\n\n    resize() {\n        const { container } = this;\n\n        if (!container.parentElement)\n            throw new Error('Container doesn\\'t have parent element');\n\n        const width = container.parentElement.clientWidth;\n        const height = container.parentElement.clientHeight;\n\n        container.style.width = width + 'px';\n        container.style.height = height + 'px';\n    }\n\n    click(e: Event) {\n        const container = this.container;\n\n        if (container !== e.target) return;\n        if (!this.trigger('click', { e, container })) return;\n    }\n}\n","import { Node } from './node';\n\nexport class Selected {\n\n    list: Node[] = [];\n\n    add(item: Node, accumulate = false) {\n        if (!accumulate)\n            this.list = [item]; \n        else if (!this.contains(item))\n            this.list.push(item);   \n    }\n\n    clear() {\n        this.list = [];\n    }\n\n    remove(item: Node) {\n        this.list.splice(this.list.indexOf(item), 1);\n    }\n\n    contains(item: Node) {\n        return this.list.indexOf(item) !== -1;\n    }\n\n    each(callback: (n: Node, index: number) => void) {\n        this.list.forEach(callback);\n    }\n}","import { Component } from '../engine/component';\n\nexport class Events {\n\n    handlers: {};\n\n    constructor(handlers: {}) {\n        this.handlers = {\n            warn: [console.warn],\n            error: [console.error],\n            componentregister: [],\n            destroy: [],\n            ...handlers\n        }\n    }\n}\n\nexport interface EventsTypes {\n    warn: string | Error;\n    error: string | Error;\n    componentregister: Component;\n    destroy: void;\n}","import { Component } from './component';\nimport { Connection } from './connection';\nimport { Control } from './control';\nimport { Data } from './core/data';\nimport { EditorView } from './view';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { Output } from './output';\nimport { Socket } from './socket';\nimport { EventsTypes as DefaultEventsTypes, Events } from './core/events';\nimport { Mouse, Transform, ZoomSource } from './view/area';\n\nexport class EditorEvents extends Events {\n\n    constructor() {\n        super({\n            nodecreate: [],\n            nodecreated: [],\n            noderemove: [],\n            noderemoved: [],\n            connectioncreate: [],\n            connectioncreated: [],\n            connectionremove: [],\n            connectionremoved: [],\n            translatenode: [],\n            nodetranslate: [],\n            nodetranslated: [],\n            nodedraged: [],\n            nodedragged: [],\n            selectnode: [],\n            multiselectnode: [],\n            nodeselect: [],\n            nodeselected: [],\n            rendernode: [],\n            rendersocket: [],\n            rendercontrol: [],\n            renderconnection: [],\n            updateconnection: [],\n            keydown: [],\n            keyup: [],\n            translate: [],\n            translated: [],\n            zoom: [],\n            zoomed: [],\n            click: [],\n            mousemove: [],\n            contextmenu: [],\n            import: [],\n            export: [],\n            process: [],\n            clear: []\n        });\n    }    \n}\n\nexport interface EventsTypes extends DefaultEventsTypes {\n    componentregister: Component;\n    nodecreate: Node;\n    nodecreated: Node;\n    noderemove: Node;\n    noderemoved: Node;\n    connectioncreate: { input: Input; output: Output };\n    connectioncreated: Connection;\n    connectionremove: Connection;\n    connectionremoved: Connection;\n    translatenode: { node: Node; dx: number; dy: number };\n    nodetranslate: { node: Node; x: number; y: number };\n    nodetranslated: { node: Node; prev: [number, number] };\n    nodedraged: Node;\n    nodedragged: Node;\n    selectnode: {\n        node: Node;\n        accumulate: boolean;\n    };\n    multiselectnode: {\n        node: Node;\n        accumulate: boolean;\n        e: MouseEvent;\n    };\n    nodeselect: Node;\n    nodeselected: Node;\n    rendernode: {\n        el: HTMLElement;\n        node: Node;\n        component: object;\n        bindSocket: Function;\n        bindControl: Function;\n    };\n    rendersocket: {\n        el: HTMLElement;\n        input?: Input;\n        output?: Output;\n        socket: Socket;\n    };\n    rendercontrol: {\n        el: HTMLElement;\n        control: Control;\n    };\n    renderconnection: {\n        el: HTMLElement;\n        connection: Connection;\n        points: number[];\n    };\n    updateconnection: {\n        el: HTMLElement;\n        connection: Connection;\n        points: number[];\n    };\n    keydown: KeyboardEvent;\n    keyup: KeyboardEvent;\n    translate: {\n        transform: Transform;\n        x: number;\n        y: number;\n    };\n    translated: void;\n    zoom: {\n        transform: Transform;\n        zoom: number;\n        source: ZoomSource;\n    };\n    zoomed: {\n        source: ZoomSource;\n    };\n    click: {\n        e: Event;\n        container: HTMLElement;\n    };\n    mousemove: Mouse;\n    contextmenu: {\n        e: MouseEvent;\n        view?: EditorView;\n        node?: Node;\n    };\n    import: Data;\n    export: Data;\n    process: void;\n    clear: void;\n}\n","import { Component } from './component';\nimport { Connection } from './connection';\nimport { Context } from './core/context';\nimport { Data } from './core/data';\nimport { EditorView } from './view/index';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { Output } from './output';\nimport { Selected } from './selected';\nimport { Validator } from './core/validator';\nimport { listenWindow } from './view/utils';\nimport { EditorEvents, EventsTypes } from './events';\n\nexport class NodeEditor extends Context<EventsTypes> {\n\n    nodes: Node[] = [];\n    selected = new Selected();\n    view: EditorView;\n\n    constructor(id: string, container: HTMLElement) {\n        super(id, new EditorEvents());\n\n        this.view = new EditorView(container, this.components, this);\n\n        this.on('destroy', listenWindow('keydown', e => this.trigger('keydown', e)));\n        this.on('destroy', listenWindow('keyup', e => this.trigger('keyup', e)));\n\n        this.on('selectnode', ({ node, accumulate }) => this.selectNode(node, accumulate));\n        this.on('nodeselected', () => this.selected.each(n => {\n            const nodeView = this.view.nodes.get(n);\n\n            nodeView && nodeView.onStart()\n        }));\n        this.on('translatenode', ({ dx, dy }) => this.selected.each(n => {\n            const nodeView = this.view.nodes.get(n);\n\n            nodeView && nodeView.onDrag(dx, dy)\n        }));\n    }\n\n    addNode(node: Node) {\n        if (!this.trigger('nodecreate', node)) return;\n\n        this.nodes.push(node);\n        this.view.addNode(node);\n\n        this.trigger('nodecreated', node);\n    }\n\n    removeNode(node: Node) {\n        if (!this.trigger('noderemove', node)) return;\n\n        node.getConnections().forEach(c => this.removeConnection(c));\n\n        this.nodes.splice(this.nodes.indexOf(node), 1);\n        this.view.removeNode(node);\n\n        this.trigger('noderemoved', node);\n    }\n\n    connect(output: Output, input: Input, data: unknown = {}) {\n        if (!this.trigger('connectioncreate', { output, input })) return;\n\n        try {\n            const connection = output.connectTo(input);\n\n            connection.data = data;\n            this.view.addConnection(connection);\n\n            this.trigger('connectioncreated', connection);\n        } catch (e) {\n            this.trigger('warn', e as Error)\n        }\n    }\n\n    removeConnection(connection: Connection) {\n        if (!this.trigger('connectionremove', connection)) return;\n\n        this.view.removeConnection(connection);\n        connection.remove();\n\n        this.trigger('connectionremoved', connection);\n    }\n\n    selectNode(node: Node, accumulate = false) {\n        if (this.nodes.indexOf(node) === -1)\n            throw new Error('Node not exist in list');\n\n        if (!this.trigger('nodeselect', node)) return;\n\n        this.selected.add(node, accumulate);\n\n        this.trigger('nodeselected', node);\n    }\n\n    getComponent(name: string) {\n        const component = this.components.get(name);\n\n        if (!component)\n            throw `Component ${name} not found`;\n\n        return component as Component;\n    }\n\n    register(component: Component) {\n        super.register(component)\n        component.editor = this;\n    }\n\n    clear() {\n        [...this.nodes].forEach(node => this.removeNode(node));\n        this.trigger('clear');\n    }\n\n    toJSON() {\n        const data: Data = { id: this.id, nodes: {} };\n\n        this.nodes.forEach(node => data.nodes[node.id] = node.toJSON());\n        this.trigger('export', data);\n        return data;\n    }\n\n    beforeImport(json: Data) {\n        const checking = Validator.validate(this.id, json);\n\n        if (!checking.success) {\n            this.trigger('warn', checking.msg);\n            return false;\n        }\n\n        this.silent = true;\n        this.clear();\n        this.trigger('import', json);\n        return true;\n    }\n\n    afterImport() {\n        this.silent = false;\n        return true;\n    }\n\n    async fromJSON(json: Data) {\n        if (!this.beforeImport(json)) return false;\n        const nodes: {[key: string]: Node} = {};\n\n        try {\n            await Promise.all(Object.keys(json.nodes).map(async id => {\n                const node = json.nodes[id];\n                const component = this.getComponent(node.name);\n\n                nodes[id] = await component.build(Node.fromJSON(node));\n                this.addNode(nodes[id]);\n            }));\n\n            Object.keys(json.nodes).forEach(id => {\n                const jsonNode = json.nodes[id];\n                const node = nodes[id];\n\n                Object.keys(jsonNode.outputs).forEach(key => {\n                    const outputJson = jsonNode.outputs[key];\n\n                    outputJson.connections.forEach(jsonConnection => {\n                        const nodeId = jsonConnection.node;\n                        const data = jsonConnection.data;\n                        const targetOutput = node.outputs.get(key);\n                        const targetInput = nodes[nodeId].inputs.get(jsonConnection.input);\n\n                        if (!targetOutput || !targetInput) {\n                            return this.trigger('error', `IO not found for node ${node.id}`);\n                        }\n\n                        this.connect(targetOutput, targetInput, data);\n                    });\n                });\n\n            });\n        } catch (e) {\n            this.trigger('warn', e as Error);\n            return !this.afterImport();\n        }\n\n        return this.afterImport();\n    }\n}\n","import { Connection } from './connection';\nimport { IO } from './io';\nimport { Input } from './input';\nimport { OutputData } from './core/data';\nimport { Socket } from './socket';\n\nexport class Output extends IO {\n\n    constructor(key: string, title: string, socket: Socket, multiConns = true) {\n        super(key, title, socket, multiConns);\n    }\n\n    hasConnection() {\n        return this.connections.length > 0;\n    }\n\n    connectTo(input: Input) {\n        if (!this.socket.compatibleWith(input.socket))\n            throw new Error('Sockets not compatible');\n        if (!input.multipleConnections && input.hasConnection())\n            throw new Error('Input already has one connection');\n        if (!this.multipleConnections && this.hasConnection())\n            throw new Error('Output already has one connection');\n\n        const connection = new Connection(this, input);\n\n        this.connections.push(connection);\n        return connection;\n    }\n\n    connectedTo(input: Input) {\n        return this.connections.some((item) => {\n            return item.input === input;\n        });\n    }\n\n    toJSON(): OutputData {\n        return {\n            'connections': this.connections.map(c => {\n                if (!c.input.node) throw new Error('Node not added to Input');\n\n                return {\n                    node: c.input.node.id,\n                    input: c.input.key,\n                    data: c.data\n                }\n            })\n        };\n    }\n}\n","export class Socket {\n\n    name: string;\n    data: unknown;\n    compatible: Socket[] = [];\n\n    constructor(name: string, data = {}) {\n        this.name = name;\n        this.data = data;\n        this.compatible = [];\n    }\n\n    combineWith(socket: Socket) {\n        this.compatible.push(socket);\n    }\n\n    compatibleWith(socket: Socket) {\n        return this === socket || this.compatible.includes(socket);\n    }\n}","export class Candidate {\n\n    key: string;\n    idCandidate: number;\n    name: string;\n    similarity: number;\n    node: Node | null = null;\n\n    constructor(key: string, idCandidate: number, name:string, similarity:number) {\n        this.node = null;\n        this.key = key;\n        this.idCandidate = idCandidate;\n        this.name = name; \n        this.similarity = similarity;\n    }\n\n    toJSON(){\n        return {\n            key: this.key,\n            idCandidate: this.idCandidate,\n            name: this.name,\n            similarity: this.similarity\n        }\n    }\n}","import { InputConnectionData, NodeData, NodesData } from '../core/data';\n\nfunction intersect<T>(array1: T[], array2: T[]) {\n    return array1.filter(value => -1 !== array2.indexOf(value));\n}\n\nexport class Recursion {\n\n    nodes: NodesData;\n\n    constructor(nodes: NodesData) {\n        this.nodes = nodes;\n    }\n\n    extractInputNodes(node: NodeData): NodeData[] {\n        return Object.keys(node.inputs).reduce((acc: NodeData[], key: string) => {\n            const { connections } = node.inputs[key];\n            const nodesData = (connections || []).reduce((b: NodeData[], c: InputConnectionData) => {\n                return [...b, this.nodes[c.node]];\n            }, []);\n\n            return [...acc, ...nodesData]\n        }, []);\n    }\n\n    findSelf(list: NodeData[], inputNodes: NodeData[]): NodeData | null {\n        const inters = intersect<NodeData>(list, inputNodes);\n\n        if (inters.length)\n            return inters[0];\n\n        for (const node of inputNodes) {\n            const l = [node, ...list];\n            const inter = this.findSelf(l, this.extractInputNodes(node));\n\n            if (inter)\n                return inter;\n        }\n\n        return null;\n    }\n\n    detect(): NodeData | null {\n        const nodesArr = Object.keys(this.nodes).map(id => this.nodes[id]);\n\n        for (const node of nodesArr) {\n            const inters = this.findSelf([node], this.extractInputNodes(node));\n\n            if (inters)\n                return inters;\n        }\n\n        return null;\n    }\n}\n","export const State = { AVAILABLE: 0, PROCESSED: 1, ABORT: 2 }","import { Events } from '../core/events';\n\nexport class EngineEvents extends Events {\n\n    constructor() {\n        super({});\n    }    \n}\nexport interface EventsTypes {\n}","import { Component } from './component';\nimport { Context } from '../core/context';\nimport { Recursion } from './recursion';\nimport { State } from './state';\nimport { Validator } from '../core/validator';\nimport { Data, NodeData, WorkerOutputs } from '../core/data';\nimport { EngineEvents, EventsTypes } from './events';\nexport { Component, Recursion };\n\ninterface EngineNode extends NodeData {\n    busy: boolean;\n    unlockPool: (() => void)[];\n    outputData: WorkerOutputs;\n}\n\nexport class Engine extends Context<EventsTypes> {\n\n    args: unknown[] = [];\n    data: Data | null = null;\n    state = State.AVAILABLE;\n    forwarded = new Set();\n    onAbort = () => { };\n\n    constructor(id: string) {\n        super(id, new EngineEvents());\n    }\n\n    public clone() {\n        const engine = new Engine(this.id);\n\n        this.components.forEach(c => engine.register(c));\n\n        return engine;\n    }\n\n    async throwError (message: string, data: unknown = null) {\n        await this.abort();\n        this.trigger('error', { message, data });\n        this.processDone();\n\n        return 'error';\n    }\n\n    private processStart() {\n        if (this.state === State.AVAILABLE) {\n            this.state = State.PROCESSED;\n            return true;\n        }\n\n        if (this.state === State.ABORT) {\n            return false;\n        }\n\n        console.warn(`The process is busy and has not been restarted.\n                Use abort() to force it to complete`);\n        return false;\n    }\n\n    private processDone() {\n        const success = this.state !== State.ABORT;\n\n        this.state = State.AVAILABLE;\n\n        if (!success) {\n            this.onAbort();\n            this.onAbort = () => { }\n        }\n\n        return success;\n    }\n\n    public async abort() {\n        return new Promise<void>(ret => {\n            if (this.state === State.PROCESSED) {\n                this.state = State.ABORT;\n                this.onAbort = ret;\n            }\n            else if (this.state === State.ABORT) {\n                this.onAbort();\n                this.onAbort = ret;\n            }\n            else\n                ret();\n        });\n    }\n\n    private async lock(node: EngineNode) {\n        return new Promise<void>(res => {\n            node.unlockPool = node.unlockPool || [];\n            if (node.busy && !node.outputData)\n                node.unlockPool.push(res);\n            else\n                res();\n\n            node.busy = true;\n        });\n    }\n\n    unlock(node: EngineNode) {\n        node.unlockPool.forEach(a => a());\n        node.unlockPool = [];\n        node.busy = false;\n    }\n\n    private async extractInputData(node: NodeData) {\n        const obj: {[id: string]: any} = {};\n\n        for (const key of Object.keys(node.inputs)) {\n            const input = node.inputs[key];\n            const conns = input.connections;\n            const connData = await Promise.all(conns.map(async (c) => {\n                const prevNode = (this.data as Data).nodes[c.node];\n\n                const outputs = await this.processNode(prevNode as EngineNode);\n\n                if (!outputs)\n                    this.abort();\n                else\n                    return outputs[c.output];\n            }));\n\n            obj[key] = connData;\n        }\n\n        return obj;\n    }\n\n    private async processWorker(node: NodeData) {\n        const inputData = await this.extractInputData(node);\n        const component = this.components.get(node.name) as Component;\n        const outputData = {};\n\n        try {\n            await component.worker(node, inputData, outputData, ...this.args);\n        } catch (e) {\n            this.abort();\n            this.trigger('warn', e as Error);\n        }\n\n        return outputData;\n    }\n\n    private async processNode(node: EngineNode) {\n        if (this.state === State.ABORT || !node)\n            return null;\n\n        await this.lock(node);\n\n        if (!node.outputData) {\n            node.outputData = await this.processWorker(node);\n        }\n\n        this.unlock(node);\n        return node.outputData;\n    }\n\n    private async forwardProcess(node: NodeData) {\n        if (this.state === State.ABORT)\n            return null;\n\n        return await Promise.all(Object.keys(node.outputs).map(async (key) => {\n            const output = node.outputs[key];\n            return await Promise.all(output.connections.map(async (c) => {\n                const nextNode = (this.data as Data).nodes[c.node];\n                if(!this.forwarded.has(nextNode)) {\n                    this.forwarded.add(nextNode);\n                    await this.processNode(nextNode as EngineNode);\n                    await this.forwardProcess(nextNode);\n                }\n            }));\n        }));\n    }\n\n    copy(data: Data) {\n        data = Object.assign({}, data);\n        data.nodes = Object.assign({}, data.nodes);\n\n        Object.keys(data.nodes).forEach(key => {\n            data.nodes[key] = Object.assign({}, data.nodes[key])\n        });\n        return data;\n    }\n\n    async validate(data: Data) {\n        const checking = Validator.validate(this.id, data);\n        const recursion = new Recursion(data.nodes);\n\n        if (!checking.success)\n            return await this.throwError(checking.msg);\n\n        const recurrentNode = recursion.detect();\n\n        if (recurrentNode)\n            return await this.throwError('Recursion detected', recurrentNode);\n\n        return true;\n    }\n\n    private async processStartNode(id: string | number | null) {\n        if (!id) return;\n\n        const startNode = (this.data as Data).nodes[id];\n\n        if (!startNode)\n            return await this.throwError('Node with such id not found');\n\n        await this.processNode(startNode as EngineNode);\n        await this.forwardProcess(startNode);\n    }\n\n    private async processUnreachable() {\n        const data = this.data as Data;\n\n        for (const i in data.nodes) { // process nodes that have not been reached\n            const node = data.nodes[i] as EngineNode;\n\n            if (typeof node.outputData === 'undefined') {\n                await this.processNode(node);\n                await this.forwardProcess(node);\n            }\n        }\n    }\n\n    async process<T extends unknown[]>(data: Data, startId: number | string | null = null, ...args: T) {\n        if (!this.processStart()) return;\n        if (!this.validate(data)) return;\n\n        this.data = this.copy(data);\n        this.args = args;\n        this.forwarded = new Set();\n\n        await this.processStartNode(startId);\n        await this.processUnreachable();\n\n        return this.processDone()?'success':'aborted';\n    }\n}\n","import { Component } from './component';\nimport { Connection } from './connection';\nimport { Control } from './control';\nimport { Emitter } from './core/emitter';\nimport { IO } from './io';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { NodeEditor } from './editor';\nimport { Output } from './output';\nimport { Socket } from './socket';\nimport { Candidate } from './candidate';\nimport { Engine, Recursion } from './engine/index';\n\nexport { Engine, Recursion } from './engine/index';\nexport { Component } from './component';\nexport { Control } from './control';\nexport { Connection } from './connection';\nexport { Emitter } from './core/emitter';\nexport { Input } from './input';\nexport { IO } from './io';\nexport { Node } from './node';\nexport { NodeEditor } from './editor';\nexport { Output } from './output';\nexport { Socket } from './socket';\nexport { Candidate } from './candidate';\n\nexport default {\n    Engine,\n    Recursion,\n    Component,\n    Control,\n    Connection,\n    Emitter,\n    Input,\n    IO,\n    Node,\n    NodeEditor,\n    Output,\n    Socket,\n    Candidate\n}"],"names":["Component","name","Node","Map","collapsed","descriptionCollapsed","inputsCollapsed","processedCollapsed","outputsCollapsed","id","incrementId","list","item","prop","has","key","Error","set","control","_add","controls","parent","input","inputs","removeConnections","node","output","outputs","candidate","candidates","meta","ios","values","connections","reduce","arr","io","reduceIO","Array","from","obj","toJSON","data","position","map","val","latestId","json","x","y","Math","max","candidatesMap","hasOwnProperty","builder","build","ComponentWorker","Connection","addConnection","removeConnection","Control","constructor","TypeError","getNode","Emitter","events","handlers","names","handler","split","forEach","push","params","String","r","e","isArray","IO","socket","multiConns","multipleConnections","connection","splice","indexOf","Input","title","length","hasConnection","c","Validator","isValidId","nodes","Object","test","id1","id2","msg","isValidData","success","Boolean","join","Context","plugins","components","plugin","options","install","component","trigger","listenWindow","event","window","addEventListener","removeEventListener","Drag","el","onTranslate","_x","_y","_e","onStart","onDrag","pointerStart","style","touchAction","down","bind","destroyMove","move","destroyUp","up","destroy","pointerType","button","stopPropagation","pageX","pageY","preventDefault","delta","zoom","getBoundingClientRect","width","offsetWidth","Zoom","container","intensity","onzoom","wheel","dblclick","end","destroyCancel","pointers","rect","isNegative","deltaY","ox","left","clientX","oy","top","clientY","touches","x1","y1","x2","y2","distance","sqrt","pow","cx","cy","p","pointerId","translating","previous","filter","Area","emitter","k","document","createElement","transformOrigin","_zoom","onZoom","_drag","on","pointermove","update","t","transform","mouse","_startPosition","_objectSpread","dx","dy","translate","source","d","appendChild","removeChild","ConnectionView","inputNode","outputNode","zIndex","points","getPoints","hasSocket","getSocketPosition","ControlView","SocketView","type","isOutput","customHackedOffsetX","nodeNameId","getElementById","toLowerCase","posY","offsetHeight","detailsElement","posXOutput","customHackedOffsetY","nodeInputs","nodeSummary","companyId","nodeFooterId","nodeOutputsId","detailsId","offsetLeft","offsetTop","NodeView","onSelect","bindSocket","bindControl","sockets","s","includes","clearSockets","get","getPosition","payload","accumulate","ctrlKey","px","py","prev","EditorView","overflow","click","view","resize","updateConnections","entries","relatedConnections","requestAnimationFrame","area","nodeView","viewInput","viewOutput","connView","getConnections","conn","parentElement","clientWidth","height","clientHeight","target","Selected","contains","callback","Events","warn","console","error","componentregister","EditorEvents","nodecreate","nodecreated","noderemove","noderemoved","connectioncreate","connectioncreated","connectionremove","connectionremoved","translatenode","nodetranslate","nodetranslated","nodedraged","nodedragged","selectnode","multiselectnode","nodeselect","nodeselected","rendernode","rendersocket","rendercontrol","renderconnection","updateconnection","keydown","keyup","translated","zoomed","mousemove","contextmenu","process","clear","NodeEditor","selectNode","selected","each","n","addNode","removeNode","connectTo","remove","add","editor","checking","validate","silent","beforeImport","Promise","all","keys","getComponent","fromJSON","jsonNode","outputJson","jsonConnection","nodeId","targetOutput","targetInput","connect","afterImport","Output","compatibleWith","some","Socket","compatible","Candidate","idCandidate","similarity","intersect","array1","array2","value","Recursion","acc","nodesData","b","inputNodes","inters","l","inter","findSelf","extractInputNodes","nodesArr","State","AVAILABLE","PROCESSED","ABORT","EngineEvents","Engine","Set","engine","register","message","abort","processDone","state","onAbort","ret","res","unlockPool","busy","outputData","a","conns","prevNode","processNode","connData","extractInputData","inputData","worker","args","lock","processWorker","unlock","nextNode","forwarded","forwardProcess","assign","recursion","throwError","recurrentNode","detect","startNode","i","startId","processStart","copy","processStartNode","processUnreachable"],"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"}